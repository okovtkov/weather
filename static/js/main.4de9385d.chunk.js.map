{"version":3,"sources":["components/icon/icon.tsx","components/small-card/small-card.tsx","components/cards/cardsData.ts","components/big-card/big-card.tsx","components/cards/cards.tsx","components/input-wrapper/input-wrapper.tsx","components/sort-form/sort-by-name.tsx","components/sort-form/search.tsx","components/sort-form/sort-by-weather-condition.tsx","components/sort-form/sort-form.tsx","components/weather-content/weather-content.tsx","components/weather-map/weather-map.tsx","index.tsx"],"names":["Icon","props","className","classNames","name","SmallCard","clickHandler","useCallback","onAddFavourite","city","onClick","mockCities","id","lat","lon","BigCard","Cards","useState","favourites","setFavourites","addFavouriteHandler","ascCompare","a","b","descCompare","cities","useMemo","compare","sortType","filter","some","item","sort","map","length","card","InputWrapper","type","value","defaultChecked","checked","onChange","placeholder","htmlFor","label","iconName","SortByName","changeHandler","invertedType","onChangeSortType","Search","text","setText","event","target","SortByWeatherCondition","SortForm","action","method","WeatherContent","setSortType","WeatherMap","src","width","height","style","border","loading","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4de9385d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport './icon.scss';\n\ninterface Props {\n  name: string;\n}\n\nconst Icon = (props: Props) => {\n  return <span className={classNames('icon', `icon--${props.name}`)} />;\n};\n\nexport default Icon;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { useCallback } from 'react';\nimport Icon from '../icon/icon';\nimport './small-card.scss';\nimport { City } from '../../types';\n\ninterface Props {\n  city: City;\n  onAddFavourite: (city: City) => void;\n}\n\nconst SmallCard = (props: Props) => {\n  const clickHandler = useCallback(() => {\n    props.onAddFavourite(props.city);\n  }, [props]);\n\n  return (\n    <div className=\"small-card\" onClick={clickHandler}>\n      <span className=\"small-card__city\">{props.city.name}</span>\n      <span className=\"small-card__temperature\">+17°</span>\n      <Icon name=\"strips-small\" />\n    </div>\n  );\n};\n\nexport default SmallCard;\n","import { City } from '../../types';\n\nconst mockCities: City[] = [\n  {\n    name: 'Москва',\n    id: '1',\n    lat: 55.76319879044565,\n    lon: 37.589805265771865,\n  },\n  {\n    name: 'Санкт-Петербург',\n    id: '2',\n    lat: 59.97665957310762,\n    lon: 30.42978408718145,\n  },\n  {\n    name: 'Киев',\n    id: '3',\n    lat: 50.472765961596984,\n    lon: 30.54041837637176,\n  },\n  {\n    name: 'Минск',\n    id: '4',\n    lat: 54.000574708273724,\n    lon: 27.843248508740455,\n  },\n  {\n    name: 'Вильнюс',\n    id: '5',\n    lat: 54.881373316788945,\n    lon: 25.23097465358437,\n  },\n  {\n    name: 'Варшава',\n    id: '6',\n    lat: 52.22478752780553,\n    lon: 20.97054950114021,\n  },\n  {\n    name: 'Вена',\n    id: '7',\n    lat: 48.39325606587112,\n    lon: 16.43859266424972,\n  },\n  {\n    name: 'Рим',\n    id: '8',\n    lat: 41.884810112266834,\n    lon: 12.63653521239818,\n  },\n  {\n    name: 'София',\n    id: '9',\n    lat: 42.616071327067154,\n    lon: 23.277818771680113,\n  },\n  {\n    name: 'Париж',\n    id: '10',\n    lat: 48.89302302108258,\n    lon: 2.2298207473739624,\n  },\n  {\n    name: 'Анкара',\n    id: '11',\n    lat: 39.844293562280036,\n    lon: 32.64463427492055,\n  },\n  {\n    name: 'Мадрид',\n    id: '12',\n    lat: 40.81859690239377,\n    lon: -3.7360928242716325,\n  },\n  {\n    name: 'Осло',\n    id: '13',\n    lat: 60.242004455108415,\n    lon: 11.014613802728068,\n  },\n  {\n    name: 'Берлин',\n    id: '14',\n    lat: 52.85420357145985,\n    lon: 13.391938319194505,\n  },\n  {\n    name: 'Прага',\n    id: '15',\n    lat: 50.22744331088483,\n    lon: 14.420600333352798,\n  },\n  {\n    name: 'Таллин',\n    id: '16',\n    lat: 59.60307084121461,\n    lon: 24.908323337417723,\n  },\n  {\n    name: 'Хельсинки',\n    id: '17',\n    lat: 60.507105953000675,\n    lon: 25.15710408929567,\n  },\n];\n\nexport default mockCities;\n","import './big-card.scss';\nimport { City } from '../../types';\n\ninterface Props {\n  city: City;\n}\n\nconst BigCard = (props: Props) => {\n  return (\n    <div className=\"big-card\">\n      <div className=\"big-card__header\">\n        <span className=\"icon icon--strips-big\" />\n        <span className=\"big-card__city\">{props.city.name}</span>\n      </div>\n      <div className=\"big-card__content\">\n        <div className=\"big-card__content-wrapper\">\n          <div className=\"big-card__weather-conditions\">\n            <span className=\"icon icon--rainy\" />\n            <span className=\"icon icon--meteor-shower\" />\n            <span className=\"icon icon--tornado\" />\n          </div>\n          <div className=\"big-card__wind\">\n            <span className=\"icon icon--wind\" />\n            <span className=\"big-card__wind-info\">Ветер ЮВ, 0-1 м/с</span>\n          </div>\n        </div>\n        <span className=\"big-card__temperature\">+12°</span>\n      </div>\n    </div>\n  );\n};\n\nexport default BigCard;\n","import { useMemo, useState, useCallback } from 'react';\nimport SmallCard from '../small-card/small-card';\nimport mockCities from './cardsData';\nimport { City, SortType } from '../../types';\nimport './cards.scss';\nimport '../weather-content/weather-content.scss';\nimport BigCard from '../big-card/big-card';\n\ninterface Props {\n  sortType: SortType;\n}\n\nconst Cards = (props: Props) => {\n  const [favourites, setFavourites] = useState<City[]>([]);\n\n  const addFavouriteHandler = useCallback(\n    (city: City) => {\n      setFavourites([...favourites, city]);\n    },\n    [favourites]\n  );\n\n  const ascCompare = useCallback((a: City, b: City) => {\n    if (a.name > b.name) return 1;\n    if (a.name < b.name) return -1;\n    return 0;\n  }, []);\n\n  const descCompare = useCallback((a: City, b: City) => {\n    if (a.name > b.name) return -1;\n    if (a.name < b.name) return 1;\n    return 0;\n  }, []);\n\n  const cities = useMemo((): City[] => {\n    const compare = props.sortType === 'asc' ? ascCompare : descCompare;\n    return mockCities\n      .filter((city) => !favourites.some((item) => city.id === item.id))\n      .sort(compare);\n  }, [ascCompare, descCompare, favourites, props.sortType]);\n\n  return (\n    <section className=\"cards\">\n      <h2 className=\"visually-hidden\">Результаты сортировки</h2>\n      <div className=\"cards__small-cards\">\n        {cities.map((city: City) => (\n          <SmallCard\n            city={city}\n            key={city.id}\n            onAddFavourite={addFavouriteHandler}\n          />\n        ))}\n      </div>\n      <div className=\"cards__big-cards\">\n        {favourites.length > 0 &&\n          favourites.map((card) => <BigCard city={card} />)}\n        <div className=\"cards__help\">\n          Перетащите сюда города, погода в которых вам интересна\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Cards;\n","import classNames from 'classnames';\nimport { ChangeEvent } from 'react';\nimport Icon from '../icon/icon';\nimport './input-wrapper.scss';\n\ninterface Props {\n  className: string;\n  type: 'checkbox' | 'radio' | 'search';\n  name: string;\n  value: string;\n  id: string;\n  label: string;\n  iconName?: string;\n  checked?: boolean;\n  placeholder?: string;\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst InputWrapper = (props: Props) => {\n  return (\n    <div\n      className={classNames(props.className, 'input-wrapper', {\n        'input-wrapper--radio': props.type === 'radio',\n        'input-wrapper--checkbox': props.type === 'checkbox',\n        'input-wrapper--search': props.type === 'search',\n      })}\n    >\n      <input\n        id={props.id}\n        type={props.type}\n        name={props.name}\n        value={props.value}\n        defaultChecked={props.checked}\n        onChange={props.onChange}\n        placeholder={props.placeholder}\n      />\n      <label htmlFor={props.id} aria-label={props.label}>\n        {props.iconName && <Icon name={props.iconName} />}\n      </label>\n    </div>\n  );\n};\n\nexport default InputWrapper;\n","import { useCallback } from 'react';\nimport { SortType } from '../../types';\nimport InputWrapper from '../input-wrapper/input-wrapper';\nimport './sort-form.scss';\n\ninterface Props {\n  sortType: SortType;\n  onChangeSortType: (param: SortType) => void;\n}\n\nconst SortByName = (props: Props) => {\n  const changeHandler = useCallback(() => {\n    const invertedType = props.sortType === 'asc' ? 'desc' : 'asc';\n    props.onChangeSortType(invertedType);\n  }, [props]);\n\n  return (\n    <div className=\"sort-form__group\">\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"radio\"\n        id=\"alphabet-sort\"\n        name=\"alphabet-sort\"\n        value=\"alphabet-sort\"\n        label=\"Сортировка по алфавиту\"\n        iconName=\"arrow-down\"\n        onChange={changeHandler}\n        checked\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"radio\"\n        id=\"alphabet-sort-reverse\"\n        name=\"alphabet-sort\"\n        value=\"alphabet-sort-reverse\"\n        label=\"Сортировка по алфавиту в обратном направлении\"\n        iconName=\"arrow-up\"\n        onChange={changeHandler}\n      />\n    </div>\n  );\n};\n\nexport default SortByName;\n","import { useCallback, useState, ChangeEvent } from 'react';\nimport InputWrapper from '../input-wrapper/input-wrapper';\nimport './sort-form.scss';\n\nconst Search = () => {\n  const [text, setText] = useState('');\n\n  const changeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  }, []);\n\n  return (\n    <div className=\"sort-form__group\">\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"search\"\n        name=\"search-city\"\n        value={text}\n        id=\"search\"\n        label=\"Поиск городов\"\n        placeholder=\"Название города\"\n        onChange={changeHandler}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import InputWrapper from '../input-wrapper/input-wrapper';\nimport './sort-form.scss';\n\nconst SortByWeatherCondition = () => {\n  return (\n    <div className=\"sort-form__group\">\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"rainy\"\n        name=\"weather-conditions\"\n        value=\"rainy\"\n        label=\"Дождливо\"\n        iconName=\"rainy\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"sunny\"\n        name=\"weather-conditions\"\n        value=\"sunny\"\n        label=\"Солнечно\"\n        iconName=\"sunny\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"cloudy\"\n        name=\"weather-conditions\"\n        value=\"cloudy\"\n        label=\"Облачно\"\n        iconName=\"cloudy\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"snowy\"\n        name=\"weather-conditions\"\n        value=\"snowy\"\n        label=\"Снежно\"\n        iconName=\"snowy\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"stormy\"\n        name=\"weather-conditions\"\n        value=\"stormy\"\n        label=\"Торнадо\"\n        iconName=\"stormy\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"blizzard\"\n        name=\"weather-conditions\"\n        value=\"blizzard\"\n        label=\"Гроза\"\n        iconName=\"blizzard\"\n      />\n      <InputWrapper\n        className=\"sort-form__input-wrapper\"\n        type=\"checkbox\"\n        id=\"metorite\"\n        name=\"weather-conditions\"\n        value=\"metorite\"\n        label=\"Метеоритный дождь\"\n        iconName=\"metorite\"\n      />\n    </div>\n  );\n};\n\nexport default SortByWeatherCondition;\n","import classNames from 'classnames';\nimport SortByName from './sort-by-name';\nimport Search from './search';\nimport './sort-form.scss';\nimport SortByWeatherCondition from './sort-by-weather-condition';\nimport { SortType } from '../../types';\n\ninterface Props {\n  className: string;\n  sortType: SortType;\n  onChangeSortType: (param: SortType) => void;\n}\n\nconst SortForm = (props: Props) => {\n  return (\n    <section className={classNames('sort-form', props.className)}>\n      <h2 className=\"visually-hidden\">Форма сортировки</h2>\n      <form action=\"#\" method=\"GET\">\n        <SortByName\n          sortType={props.sortType}\n          onChangeSortType={props.onChangeSortType}\n        />\n        <Search />\n        <SortByWeatherCondition />\n      </form>\n    </section>\n  );\n};\n\nexport default SortForm;\n","import { useState } from 'react';\nimport Cards from '../cards/cards';\nimport SortForm from '../sort-form/sort-form';\nimport { SortType } from '../../types';\nimport './weather-content.scss';\n\nconst WeatherContent = () => {\n  const [sortType, setSortType] = useState<SortType>('asc');\n\n  return (\n    <div className=\"weather-content\">\n      <SortForm\n        className=\"weather-content__sort\"\n        sortType={sortType}\n        onChangeSortType={setSortType}\n      />\n      <Cards sortType={sortType} />\n    </div>\n  );\n};\n\nexport default WeatherContent;\n","import './weather-map.scss';\n\nconst WeatherMap = () => {\n  return (\n    <iframe\n      src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d949422.0486980503!2d30.108637621644977!3d59.78893689132138!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sru!2sua!4v1638901866413!5m2!1sru!2sua\"\n      width=\"800\"\n      height=\"600\"\n      // eslint-disable-next-line react-perf/jsx-no-new-object-as-prop\n      style={{ border: 0 }}\n      loading=\"lazy\"\n      title=\"map\"\n      className=\"weather-map\"\n    />\n  );\n};\n\nexport default WeatherMap;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport WeatherContent from './components/weather-content/weather-content';\nimport WeatherMap from './components/weather-map/weather-map';\n\nReactDOM.render(\n  <StrictMode>\n    <div className=\"weather-app\">\n      <WeatherContent />\n      <WeatherMap />\n    </div>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}